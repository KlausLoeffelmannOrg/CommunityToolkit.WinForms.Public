"Below"
" is"
" an"
" example"
" of"
" a"
" C"
"#"
" command"
"-line"
" application"
" that"
" uses"
" reflection"
" to"
" search"
" for"
" all"
" types"
" in"
" System"
".Windows"
".Forms"
" which"
" either"
" have"
" a"
" Type"
"Editor"
"Attribute"
" defined"
" directly"
" on"
" the"
" type"
" or"
" on"
" any"
" of"
" its"
" properties"
".\n\n"
"The"
" code"
" is"
" structured"
" with"
" modern"
" practices"
" including"
" null"
"ability"
" awareness"
" and"
" collection"
" initial"
"izers"
"."
" Would"
" you"
" like"
" to"
" see"
" a"
" brief"
" explanation"
" of"
" the"
" parts"
","
" or"
" should"
" I"
" go"
" ahead"
" and"
" provide"
" more"
" details"
" on"
" the"
" implementation"
"?\n\n"
"\u0060\u0060\u0060"
"c"
"sharp"
"\n"
"//"
" ***"
" File"
":"
" Program"
".cs"
" ***\n"
"using"
" System"
";\n"
"using"
" System"
".Collections"
".Generic"
";\n"
"using"
" System"
".Drawing"
".Design"
";\n"
"using"
" System"
".Linq"
";\n"
"using"
" System"
".Reflection"
";\n"
"using"
" System"
".Windows"
".Forms"
";\n\n"
"namespace"
" Win"
"Forms"
"Type"
"Editor"
"Finder"
"\n"
"{\n"
"   "
" ///"
" <"
"summary"
">\n"
"   "
" ///"
" CLI"
" application"
" for"
" finding"
" types"
" in"
" System"
".Windows"
".Forms"
" that"
" are"
" decorated"
" with"
" Type"
"Editor"
"Attribute"
".\n"
"   "
" ///"
" </"
"summary"
">\n"
"   "
" public"
" static"
" class"
" Program"
"\n"
"   "
" {\n"
"       "
" ///"
" <"
"summary"
">\n"
"       "
" ///"
" Application"
" entry"
" point"
".\n"
"       "
" ///"
" </"
"summary"
">\n"
"       "
" ///"
" <"
"param"
" name"
"=\u0022"
"args"
"\u0022>"
"Command"
"-line"
" arguments"
".</"
"param"
">\n"
"       "
" public"
" static"
" void"
" Main"
"(string"
"[]"
" args"
")\n"
"       "
" {\n"
"           "
" //"
" Get"
" the"
" assembly"
" that"
" defines"
" Win"
"Forms"
".\n"
"           "
" Assembly"
" win"
"Forms"
"Assembly"
" ="
" typeof"
"(Form"
")."
"Assembly"
";\n"
"            \n"
"           "
" //"
" Get"
" the"
" attribute"
" type"
" to"
" search"
" for"
".\n"
"           "
" Type"
" type"
"Editor"
"Attribute"
"Type"
" ="
" typeof"
"(Type"
"Editor"
"Attribute"
");\n"
"            \n"
"           "
" //"
" List"
" to"
" hold"
" the"
" found"
" information"
".\n"
"           "
" var"
" results"
" ="
" new"
" List"
"<string"
">();\n\n"
"           "
" //"
" Iterate"
" all"
" the"
" types"
" in"
" the"
" assembly"
".\n"
"           "
" foreach"
" ("
"Type"
"?"
" type"
" in"
" win"
"Forms"
"Assembly"
".Get"
"Types"
"())\n"
"           "
" {\n"
"               "
" //"
" Skip"
" undefined"
" types"
" ("
"should"
"n't"
" occur"
" with"
" Get"
"Types"
","
" but"
" check"
" for"
" null"
" in"
" theory"
")\n"
"               "
" if"
" ("
"type"
" is"
" null"
")\n"
"               "
" {\n"
"                   "
" continue"
";\n"
"               "
" }\n\n"
"               "
" bool"
" found"
"On"
"Class"
" ="
" type"
".Is"
"Defined"
"(type"
"Editor"
"Attribute"
"Type"
","
" inherit"
":"
" false"
");\n"
"               "
" var"
" property"
"Matches"
" ="
" new"
" List"
"<string"
">();\n\n"
"               "
" //"
" Check"
" properties"
" even"
" if"
" we"
" already"
" found"
" attribute"
" on"
" the"
" type"
".\n"
"               "
" var"
" properties"
" ="
" type"
".Get"
"Properties"
"(B"
"inding"
"Flags"
".Public"
" |"
" Binding"
"Flags"
".Non"
"Public"
" |"
" Binding"
"Flags"
".Instance"
" |"
" Binding"
"Flags"
".Static"
");\n"
"               "
" foreach"
" ("
"Property"
"Info"
"?"
" prop"
" in"
" properties"
")\n"
"               "
" {\n"
"                   "
" if"
" ("
"prop"
" is"
" null"
")\n"
"                   "
" {\n"
"                       "
" continue"
";\n"
"                   "
" }\n"
"                   "
" if"
" ("
"prop"
".Is"
"Defined"
"(type"
"Editor"
"Attribute"
"Type"
","
" inherit"
":"
" false"
"))\n"
"                   "
" {\n"
"                       "
" property"
"Matches"
".Add"
"(prop"
".Name"
");\n"
"                   "
" }\n"
"               "
" }\n\n"
"               "
" //"
" If"
" the"
" attribute"
" is"
" found"
" on"
" the"
" class"
" itself"
" or"
" any"
" property"
" then"
" collect"
" the"
" result"
".\n"
"               "
" if"
" ("
"found"
"On"
"Class"
" ||"
" property"
"Matches"
".Count"
" >"
" "
"0"
")\n"
"               "
" {\n"
"                   "
" string"
" match"
"Info"
" ="
" found"
"On"
"Class"
" \n"
"                       "
" ?"
" $\u0022"
"["
"Class"
"]"
" {"
"type"
".Full"
"Name"
"}\u0022"
" \n"
"                       "
" :"
" $\u0022"
"["
"Type"
"]"
" {"
"type"
".Full"
"Name"
"}\u0022;\n"
"                   "
" if"
" ("
"property"
"Matches"
".Count"
" >"
" "
"0"
")\n"
"                   "
" {\n"
"                       "
" //"
" Append"
" properties"
" names"
".\n"
"                       "
" match"
"Info"
" +="
" \u0022"
" {"
" Properties"
":"
" \u0022"
" +"
" string"
".Join"
"(\u0022,"
" \u0022,"
" property"
"Matches"
")"
" +"
" \u0022"
" }"
"\u0022;\n"
"                   "
" }\n"
"                    \n"
"                   "
" results"
".Add"
"(match"
"Info"
");\n"
"               "
" }\n"
"           "
" }\n\n"
"           "
" //"
" Output"
" results"
"\n"
"           "
" Console"
".Write"
"Line"
"($\u0022"
"Found"
" types"
" with"
" {"
"type"
"Editor"
"Attribute"
"Type"
".Name"
"}:"
"\u0022);\n"
"           "
" if"
" ("
"results"
".Count"
" =="
" "
"0"
")\n"
"           "
" {\n"
"               "
" Console"
".Write"
"Line"
"(\u0022"
"No"
" matches"
" found"
".\u0022);\n"
"           "
" }\n"
"           "
" else"
"\n"
"           "
" {\n"
"               "
" foreach"
" ("
"string"
" result"
" in"
" results"
".Order"
"By"
"(s"
" =>"
" s"
"))\n"
"               "
" {\n"
"                   "
" Console"
".Write"
"Line"
"(result"
");\n"
"               "
" }\n"
"           "
" }\n"
"       "
" }\n"
"   "
" }\n"
"}\n"
"\u0060\u0060"
"\u0060\n\n"
"{{"
"summary"
":"
" Command"
"-line"
" app"
" scanning"
" System"
".Windows"
".Forms"
" for"
" Type"
"Editor"
"Attribute"
" on"
" classes"
" and"
" properties"
" }}\n\n"
"Would"
" you"
" like"
" any"
" further"
" explanations"
" or"
" adjustments"
" on"
" how"
" this"
" implementation"
" works"
"?"
"  \n\n"
null
null